AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: python3.12
    Timeout: 10
    MemorySize: 256
    Tracing: Active

Parameters:
  UserId:
    Type: String
    Default: me
    Description: Single user ID for personal use

Resources:
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: task_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: task_id
          KeyType: RANGE
      TableClass: STANDARD
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST", "PATCH", "DELETE", "OPTIONS"]
        AllowHeaders: ["*"]
      Auth:
        EnableIamAuthorizer: true
        DefaultAuthorizer: AWS_IAM # ← ここがポイント（IAM ではなく AWS_IAM）

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: handler.handler
      Environment:
        Variables:
          ALLOWED_ORIGINS: "http://localhost:5500,https://$CfDomain"
          TABLE_NAME: !Ref TodoTable
          USER_ID:
            !Ref UserId
            # 追加↓（SES設定）
          EMAIL_FROM: "m.daisuke1110@gmail.com" # SESで検証済みの送信元に置き換え
          EMAIL_TO: "m.daisuke1110@outlook.jp" # サンドボックス中は受信側も検証が必要
          SES_REGION: "ap-northeast-3"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TodoTable
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
      Events:
        AnyRoute:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY

  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ApiFunction}"
      RetentionInDays: 30

  DueCheck:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/
      Handler: duecheck.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TodoTable
          USER_ID: !Ref UserId
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TodoTable
        - DynamoDBWritePolicy:
            TableName: !Ref TodoTable
      Events:
        Daily0900JST:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)

  DueCheckLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DueCheck}"
      RetentionInDays: 30

Outputs:
  ApiEndpoint:
    Description: Invoke URL (HTTP API - requires AWS SigV4)
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  TableName:
    Value: !Ref TodoTable
